name: Preview build and deploy - AWS CDK | Next.js

on:
  push:
    branches: [preview]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{vars.AWS_REGION}}

jobs:
  cdk:
    runs-on: ubuntu-latest

    environment: preview

    env:
      ACTIONS_ROLE_ARN: ${{secrets.ACTIONS_ROLE_ARN}}
      AWS_TABLE_NAME: ${{vars.AWS_TABLE_NAME}}
      AWS_EXTERNAL_ID: ${{secrets.AWS_EXTERNAL_ID}}
      AWS_SECRET_NAME: ${{vars.AWS_SECRET_NAME}}
      AWS_DYNAMODB_USER: ${{vars.AWS_DYNAMODB_USER}}
      AWS_DYNAMODB_ROLE: ${{vars.AWS_DYNAMODB_ROLE}}
      AWS_DYNAMODB_POLICY: ${{vars.AWS_DYNAMODB_POLICY}}
      AWS_ASSUME_ROLE_POLICY: ${{vars.AWS_ASSUME_ROLE_POLICY}}

    outputs:
      AWS_ACCESS_KEY_ID: ${{ steps.secrets.outputs.ZNAP_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ steps.secrets.outputs.ZNAP_AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4.0.0

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{vars.AWS_REGION}}
          role-to-assume: ${{secrets.ACTIONS_ROLE_ARN}}

      - name: AWS account - Debug
        run: aws sts get-caller-identity

      - name: CDK deploy
        run: |
          export CDK_DEFAULT_ACCOUNT=$(aws sts get-caller-identity | jq -r '.Account')
          pnpm add -g aws-cdk
          cd apps/cdk
          pnpm run build
          cdk deploy Prev/* --require-approval never

      - name: Get secrets from AWS Secrets Manager
        id: secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: ${{vars.AWS_SECRET_NAME}}
          parse-json-secrets: true

      # - name: Set outputs
      #   id: set-outputs
      #   run: |
      #     ACCESS_KEY_ID=$(echo "${{ steps.secrets.outputs.secrets }}" | jq -r '.ZNAP_URL_SECRET_AWS_ACCESS_KEY_ID')
      #     SECRET_ACCESS_KEY=$(echo "${{ steps.secrets.outputs.secrets }}" | jq -r '.ZNAP_URL_SECRET_AWS_SECRET_ACCESS_KEY')
      #     echo "AWS_ACCESS_KEY_ID=$ACCESS_KEY_ID" >> $GITHUB_OUTPUT
      #     echo "AWS_SECRET_ACCESS_KEY=$SECRET_ACCESS_KEY" >> $GITHUB_OUTPUT

  nextjs:
    runs-on: ubuntu-latest

    environment: preview

    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      AUTH_GITHUB_ID: ${{secrets.AUTH_GITHUB_ID}}
      AUTH_GITHUB_SECRET: ${{secrets.AUTH_GITHUB_SECRET}}

      AUTH_SECRET: ${{secrets.AUTH_SECRET}}

      AWS_ACCESS_KEY_ID: ${{ needs.cdk.outputs.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ needs.cdk.outputs.AWS_SECRET_ACCESS_KEY }}

    needs: cdk

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Install Vercel CLI
        run: pnpm install --global vercel@latest

      - name: Pull vercel environment inforamation
        run: vercel pull --yes --environment=preview --token=${{secrets.VERCEL_TOKEN}}

      - name: Build project artifacts
        run: vercel build --cwd apps/web --token=${{secrets.VERCEL_TOKEN}}

      - name: Deploy project artifacts
        run: vercel deploy --prebuilt --token=${{secrets.VERCEL_TOKEN}}
