name: Preview build and deploy - AWS CDK | Next.js

on:
  push:
    branches: [preview]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{vars.AWS_REGION}}

jobs:
  cdk:
    runs-on: ubuntu-latest

    environment: preview

    env:
      ACTIONS_ROLE_ARN: ${{secrets.ACTIONS_ROLE_ARN}}
      AWS_TABLE_NAME: ${{vars.AWS_TABLE_NAME}}
      AWS_EXTERNAL_ID: ${{secrets.AWS_EXTERNAL_ID}}
      AWS_SECRET_NAME: ${{vars.AWS_SECRET_NAME}}
      AWS_DYNAMODB_USER: ${{vars.AWS_DYNAMODB_USER}}
      AWS_DYNAMODB_ROLE: ${{vars.AWS_DYNAMODB_ROLE}}
      AWS_DYNAMODB_POLICY: ${{vars.AWS_DYNAMODB_POLICY}}
      AWS_ASSUME_ROLE_POLICY: ${{vars.AWS_ASSUME_ROLE_POLICY}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4.0.0

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{vars.AWS_REGION}}
          role-to-assume: ${{secrets.ACTIONS_ROLE_ARN}}

      - name: AWS account - Debug
        run: aws sts get-caller-identity

      - name: CDK deploy
        run: |
          export CDK_DEFAULT_ACCOUNT=$(aws sts get-caller-identity | jq -r '.Account')
          pnpm add -g aws-cdk
          cd apps/cdk
          pnpm run build
          cdk deploy Prev/* --require-approval never

  nextjs:
    needs: cdk
    runs-on: ubuntu-latest
    environment: preview

    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      AUTH_GITHUB_ID: ${{secrets.AUTH_GITHUB_ID}}
      AUTH_GITHUB_SECRET: ${{secrets.AUTH_GITHUB_SECRET}}

      AUTH_SECRET: ${{secrets.AUTH_SECRET}}

      AWS_TABLE_NAME: ${{ vars.AWS_TABLE_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{vars.AWS_REGION}}
          role-to-assume: ${{secrets.ACTIONS_ROLE_ARN}}

      - name: Get secrets from AWS Secrets Manager
        id: secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            ,${{vars.AWS_SECRET_NAME}}
          parse-json-secrets: true

      - name: Install Vercel CLI
        run: pnpm install --global vercel@latest

      # - name: Update .vercel/.env.preview.local
      #   run: |
      #     echo "AWS_REGION=${{ vars.AWS_REGION }}" >> .vercel/.env.preview.local
      #     echo "AWS_ACCESS_KEY_ID=$ZNAP_AWS_SECRET_ACCESS_KEY" >> .vercel/.env.preview.local
      #     echo "AWS_SECRET_ACCESS_KEY=$ZNAP_AWS_SECRET_ACCESS_KEY" >> .vercel/.env.preview.local
      #     echo "AUTH_GITHUB_ID=${{ secrets.AUTH_GITHUB_ID }}" >> .vercel/.env.preview.local
      #     echo "AUTH_GITHUB_SECRET=${{ secrets.AUTH_GITHUB_SECRET }}" >> .vercel/.env.preview.local
      #     echo "AUTH_SECRET=${{ secrets.AUTH_SECRET }}" >> .vercel/.env.preview.local
      #     echo "AWS_TABLE_NAME=${{ vars.AWS_TABLE_NAME }}" >> .vercel/.env.preview.local

      # - name: Verify .vercel/.env.preview.local Content
      #   run: cat .vercel/.env.preview.local

      - name: Remove Existing Vercel Environment Variables (if any)
        run: |
          vercel env ls --token=${{ secrets.VERCEL_TOKEN }} | grep AWS_REGION && vercel env rm AWS_REGION preview --yes --token=${{ secrets.VERCEL_TOKEN }} || echo "AWS_REGION not found"
          vercel env ls --token=${{ secrets.VERCEL_TOKEN }} | grep AWS_ACCESS_KEY_ID && vercel env rm AWS_ACCESS_KEY_ID preview --yes --token=${{ secrets.VERCEL_TOKEN }} || echo "AWS_ACCESS_KEY_ID not found"
          vercel env ls --token=${{ secrets.VERCEL_TOKEN }} | grep AWS_SECRET_ACCESS_KEY && vercel env rm AWS_SECRET_ACCESS_KEY preview --yes --token=${{ secrets.VERCEL_TOKEN }} || echo "AWS_SECRET_ACCESS_KEY not found"
          vercel env ls --token=${{ secrets.VERCEL_TOKEN }} | grep AUTH_GITHUB_ID && vercel env rm AUTH_GITHUB_ID preview --yes --token=${{ secrets.VERCEL_TOKEN }} || echo "AUTH_GITHUB_ID not found"
          vercel env ls --token=${{ secrets.VERCEL_TOKEN }} | grep AUTH_GITHUB_SECRET && vercel env rm AUTH_GITHUB_SECRET preview --yes --token=${{ secrets.VERCEL_TOKEN }} || echo "AUTH_GITHUB_SECRET not found"
          vercel env ls --token=${{ secrets.VERCEL_TOKEN }} | grep AUTH_SECRET && vercel env rm AUTH_SECRET preview --yes --token=${{ secrets.VERCEL_TOKEN }} || echo "AUTH_SECRET not found"
          vercel env ls --token=${{ secrets.VERCEL_TOKEN }} | grep AWS_TABLE_NAME && vercel env rm AWS_TABLE_NAME preview --yes --token=${{ secrets.VERCEL_TOKEN }} || echo "AWS_TABLE_NAME not found"

      - name: Set Vercel Env Variable
        run: |
          echo ${{ vars.AWS_REGION }} | vercel env add AWS_REGION preview --token=${{ secrets.VERCEL_TOKEN }} 
          echo $ZNAP_AWS_ACCESS_KEY_ID | vercel env add AWS_ACCESS_KEY_ID preview --token=${{ secrets.VERCEL_TOKEN }} 
          echo $ZNAP_AWS_SECRET_ACCESS_KEY | vercel env add AWS_SECRET_ACCESS_KEY preview --token=${{ secrets.VERCEL_TOKEN }} 
          echo ${{ secrets.AUTH_GITHUB_ID }} | vercel env add AUTH_GITHUB_ID preview --token=${{ secrets.VERCEL_TOKEN }} 
          echo ${{ secrets.AUTH_GITHUB_SECRET }} | vercel env add AUTH_GITHUB_SECRET preview --token=${{ secrets.VERCEL_TOKEN }} 
          echo ${{ secrets.AUTH_SECRET }} | vercel env add AUTH_SECRET preview --token=${{ secrets.VERCEL_TOKEN }} 
          echo ${{ vars.AWS_TABLE_NAME }} | vercel env add AWS_TABLE_NAME preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Pull vercel environment inforamation
        run: vercel pull --yes --environment=preview --token=${{secrets.VERCEL_TOKEN}}

      - name: Build project artifacts
        run: |
          echo "AWS_REGION=${{ vars.AWS_REGION }}" >> .env
          vercel build --token=${{secrets.VERCEL_TOKEN}}

      - name: Deploy project artifacts
        run: vercel deploy --prebuilt --token=${{secrets.VERCEL_TOKEN}}
